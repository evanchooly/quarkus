package io.quarkus.mongodb.panache.kotlin.deployment

import com.mongodb.client.MongoCollection
import com.mongodb.client.MongoDatabase
import io.quarkus.mongodb.panache.PanacheUpdate
import io.quarkus.mongodb.panache.kotlin.PanacheMongoCompanion
import io.quarkus.mongodb.panache.kotlin.PanacheMongoEntity
import io.quarkus.mongodb.panache.kotlin.PanacheQuery
				import io.quarkus.mongodb.panache.kotlin.runtime.KotlinMongoOperations.Companion.INSTANCE
import io.quarkus.panache.common.Parameters
import io.quarkus.panache.common.Sort
import org.bson.Document
import org.bson.types.ObjectId
import java.util.stream.Stream

/**
 * This class is used by TestEnhancers to validate the bytecode generation.  Each method on PanacheMongoCompanion is
 * manually implemented to give us a compiler generated metric against which to validate the quarkus generated bytecode.
 * TestEnhancers further validates that all @GenerateBridge annotated methods are represented by a 'target_' method
 * here.
 */
@Suppress("UNCHECKED_CAST", "unused")
class Widget : PanacheMongoEntity() {
    companion object : PanacheMongoCompanion<Widget> {
        fun target_count(): Long
            = INSTANCE.count(Widget::class.java)

        fun target_count(query: Document): Long
            = INSTANCE.count(Widget::class.java, query)

        fun target_count(query: String, params: Map<String, Any?>): Long
            = INSTANCE.count(Widget::class.java, query, params)

        fun target_count(query: String, params: Parameters): Long
            = INSTANCE.count(Widget::class.java, query, params)

        fun target_count(query: String, vararg params: Any?): Long
            = INSTANCE.count(Widget::class.java, query, *params)

        fun target_delete(query: Document): Long
            = INSTANCE.delete(Widget::class.java, query)

        fun target_delete(query: String, params: Map<String, Any?>): Long
            = INSTANCE.delete(Widget::class.java, query, params)

        fun target_delete(query: String, params: Parameters): Long
            = INSTANCE.delete(Widget::class.java, query, params)

        fun target_delete(query: String, vararg params: Any?): Long
            = INSTANCE.delete(Widget::class.java, query, *params)

        fun target_deleteAll(): Long
            = INSTANCE.deleteAll(Widget::class.java)

        fun target_deleteById(id: ObjectId): Boolean
            = INSTANCE.deleteById(Widget::class.java, id)

        fun target_find(query: Document): PanacheQuery<Widget>
            = INSTANCE.find(Widget::class.java, query) as PanacheQuery<Widget>

        fun target_find(query: Document, sort: Document): PanacheQuery<Widget>
            = INSTANCE.find(Widget::class.java, query, sort) as PanacheQuery<Widget>

        fun target_find(query: String, params: Map<String, Any?>): PanacheQuery<Widget>
            = INSTANCE.find(Widget::class.java, query, params) as PanacheQuery<Widget>

        fun target_find(query: String, params: Parameters): PanacheQuery<Widget>
            = INSTANCE.find(Widget::class.java, query, params) as PanacheQuery<Widget>

        fun target_find(query: String, sort: Sort, params: Map<String, Any?>): PanacheQuery<Widget>
            = INSTANCE.find(Widget::class.java, query, sort, params) as PanacheQuery<Widget>

        fun target_find(query: String, sort: Sort, params: Parameters): PanacheQuery<Widget>
            = INSTANCE.find(Widget::class.java, query, sort, params) as PanacheQuery<Widget>

        fun target_find(query: String, sort: Sort, vararg params: Any?): PanacheQuery<Widget>
            = INSTANCE.find(Widget::class.java, query, sort, *params) as PanacheQuery<Widget>

        fun target_find(query: String, vararg params: Any?): PanacheQuery<Widget>
            = INSTANCE.find(Widget::class.java, query, *params) as PanacheQuery<Widget>

        fun target_findAll(): PanacheQuery<Widget>
            = INSTANCE.findAll(Widget::class.java) as PanacheQuery<Widget>

        fun target_findAll(sort: Sort): PanacheQuery<Widget>
            = INSTANCE.findAll(Widget::class.java, sort) as PanacheQuery<Widget>

        fun target_findById(id: ObjectId): Widget?
            = INSTANCE.findById(Widget::class.java, id) as Widget?

        fun target_list(query: Document): List<Widget>
            = INSTANCE.list(Widget::class.java, query) as List<Widget>

        fun target_list(query: Document, sort: Document): List<Widget>
            = INSTANCE.list(Widget::class.java, query, sort) as List<Widget>

        fun target_list(query: String, params: Map<String, Any?>): List<Widget>
            = INSTANCE.list(Widget::class.java, query, params) as List<Widget>

        fun target_list(query: String, params: Parameters): List<Widget>
            = INSTANCE.list(Widget::class.java, query, params) as List<Widget>

        fun target_list(query: String, sort: Sort, params: Map<String, Any?>): List<Widget>
            = INSTANCE.list(Widget::class.java, query, sort, params) as List<Widget>

        fun target_list(query: String, sort: Sort, params: Parameters): List<Widget>
            = INSTANCE.list(Widget::class.java, query, sort, params) as List<Widget>

        fun target_list(query: String, sort: Sort, vararg params: Any?): List<Widget>
            = INSTANCE.list(Widget::class.java, query, sort, *params) as List<Widget>

        fun target_list(query: String, vararg params: Any?): List<Widget>
            = INSTANCE.list(Widget::class.java, query, *params) as List<Widget>

        fun target_listAll(): List<Widget>
            = INSTANCE.listAll(Widget::class.java) as List<Widget>

        fun target_listAll(sort: Sort): List<Widget>
            = INSTANCE.listAll(Widget::class.java, sort) as List<Widget>

        fun target_mongoCollection(): MongoCollection<Widget>
            = INSTANCE.mongoCollection(Widget::class.java) as MongoCollection<Widget>

        fun target_mongoDatabase(): MongoDatabase
            = INSTANCE.mongoDatabase(Widget::class.java)

        fun target_stream(query: Document): Stream<Widget>
            = INSTANCE.stream(Widget::class.java, query) as Stream<Widget>

        fun target_stream(query: Document, sort: Document): Stream<Widget>
            = INSTANCE.stream(Widget::class.java, query, sort) as Stream<Widget>

        fun target_stream(query: String, params: Map<String, Any?>): Stream<Widget>
            = INSTANCE.stream(Widget::class.java, query, params) as Stream<Widget>

        fun target_stream(query: String, params: Parameters): Stream<Widget>
            = INSTANCE.stream(Widget::class.java, query, params) as Stream<Widget>

        fun target_stream(query: String, sort: Sort, params: Map<String, Any?>): Stream<Widget>
            = INSTANCE.stream(Widget::class.java, query, sort, params) as Stream<Widget>

        fun target_stream(query: String, sort: Sort, params: Parameters): Stream<Widget>
            = INSTANCE.stream(Widget::class.java, query, sort, params) as Stream<Widget>

        fun target_stream(query: String, sort: Sort, vararg params: Any?): Stream<Widget>
            = INSTANCE.stream(Widget::class.java, query, sort, *params) as Stream<Widget>

        fun target_stream(query: String, vararg params: Any?): Stream<Widget>
            = INSTANCE.stream(Widget::class.java, query, *params) as Stream<Widget>

        fun target_streamAll(): Stream<Widget>
            = INSTANCE.streamAll(Widget::class.java) as Stream<Widget>

        fun target_streamAll(sort: Sort): Stream<Widget>
            = INSTANCE.streamAll(Widget::class.java, sort) as Stream<Widget>

        fun target_update(update: String, params: Map<String, Any?>): PanacheUpdate
            = INSTANCE.update(Widget::class.java, update, params)

        fun target_update(update: String, params: Parameters): PanacheUpdate
            = INSTANCE.update(Widget::class.java, update, params)

        fun target_update(update: String, vararg params: Any?): PanacheUpdate
            = INSTANCE.update(Widget::class.java, update, *params)

    }
}
